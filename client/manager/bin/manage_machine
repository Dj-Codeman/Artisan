#!/usr/bin/python3

import os, sys
import csv
from artisan_tools import client_functions as client
from artisan_tools import machine_functions as machine

with open("/etc/artisan.mid", 'r') as file:
    mid = file.read().rstrip()

connection = machine.create_server_connection("database.local", "artisan", machine.decrypt_creds("database"))

def resolve_client(cid):
    query = f"SELECT * FROM client_id WHERE client_id = '{cid}'"

    client_data = machine.read_query(connection, query)
    return client_data

def exact_match(data, string):
    for line in data:
        if line.strip() == string:
            return True
    return False

def update_machine():
    
    # Getting  machine info
    query = f"SELECT * FROM machine_id WHERE uuid = '{mid}';"
    machine_data = machine.read_query(connection, query)

    for data in machine_data:

        machine_id = data[0]
        machine_type = data[1]
        
        current_mac = machine.get_mac_addr()
        stored_mac = data[2]

        current_ip = machine.get_ip()    
        stored_ip = data[3]


        print(f"Machine : {machine_id} Type : {machine_type} Action : Updating \n")

        # ? Running the actual checks
        if current_mac != stored_mac:
            machine.send_email(f"HEY! floating mac addr on machine {machine_id} ! Site might be unavailable")
            print(f"HEY! floating mac addr on machine {machine_id} ! Site might be unavailable")
            sys.exit(1)

        if current_ip != stored_ip:
            print(f"Machine {machine_id}: New ip assigned updating \n")
            os.system("dhclient -r") # * releasing the old ip
            os.system("dhclient") # * requesting the new one
            machine.send_email(f"Machine: {machine_id} has applied the assinged ip {stored_ip}")

def update_clients():
    # get installed client array
    local_clients = []
    cloud_clients = []

    # * downloading cloud users
    query = f"SELECT * FROM machine_id WHERE uuid = '{mid}';"
    cloud_data = machine.read_query(connection, query)

    with open("/tmp/cloud.cid", "w") as cloud_file:
        if cloud_data[0][4] != None:
            cloud_data_new = cloud_data[0][4].replace(',', '\n')
            cloud_file.write(cloud_data_new.rstrip())
        else:
            cloud_data_new = " "
            cloud_file.write(cloud_data_new.rstrip())


    # * phrasing cloud users
    with open("/tmp/cloud.cid") as cloud_cid:
        reader = csv.reader(cloud_cid, delimiter=',') # change contents to floats
        for row in reader: # each row is a list
            cloud_clients.append(row)
       
    # * Generating local users
    with open("/etc/artisan.cid") as data:
        local_data = data.readline()

    with open("/tmp/local.cid", "w") as local_file:
        local_data_new = local_data.replace(',', '\n')
        local_file.write(local_data_new.rstrip())

    # * phrasing local users
    with open("/tmp/local.cid") as local_cid:
        reader = csv.reader(local_cid, delimiter=',') # change contents to floats
        for row in reader: # each row is a list
            local_clients.append(row)

# ? Generating lists to add and to delete
    adding = []
    deling = []

    # * finding what to add
    for c_cid in cloud_clients:
        if c_cid not in local_clients:
            index_num = cloud_clients.index(c_cid)
            cid_num = cloud_clients[index_num][0]
            print(f"Machine: {mid} Client to add: {cid_num}\n")
            adding.append(cid_num)

    # * finding what to del
    for l_cid in local_clients:
        if l_cid not in cloud_clients:
            index_num = local_clients.index(l_cid)
            cid_num = local_clients[index_num][0]
            print(f"Machine: {mid} Client to suspend: {cid_num}\n")
            deling.append(cid_num)

    
    client.add_clients(adding)
    client.sus_clients(deling)

update_machine()
update_clients()


